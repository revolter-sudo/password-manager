//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                String             @id() @default(uuid())
  name              String?
  email             String?            @unique()
  pictureUrl        String?            @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation   String?
  status            UserStatus         @default(VERIFIED)
  globalRole        String             @default("USER")
  /// @password
  /// @omit
  password          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt()
  passwordEntrys    PasswordEntry[]    @relation("user")
  clipboardHistorys ClipboardHistory[] @relation("user")
}

/// @@allow('all', true)
model PasswordEntry {
  id                String             @id() @default(uuid())
  appName           String?
  username          String?
  encryptedPassword String?
  lastCopied        String
  userId            String?
  user              User?              @relation(fields: [userId], references: [id], name: "user")
  clipboardHistorys ClipboardHistory[] @relation("passwordEntry")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt()
}

/// @@allow('all', true)
model ClipboardHistory {
  id              String         @id() @default(uuid())
  type            String?
  timestamp       String
  userId          String?
  user            User?          @relation(fields: [userId], references: [id], name: "user")
  passwordEntryId String?
  passwordEntry   PasswordEntry? @relation(fields: [passwordEntryId], references: [id], name: "passwordEntry")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now()) @updatedAt()
}
